import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author basilGeorge
 */
public class HMMClassifer {

    GUI guiinst;

    double [][]inpmatrix;
    double [] outmatrix;

    int totalr=0;


    void init(GUI inst)
    {
         guiinst = inst;





    }

    public void trainClassifier()
    {


        int count = 0;
        try
        {
           FileReader fr = new FileReader("training.txt");

           BufferedReader buf=new BufferedReader(fr);

           String s;

           while ((s=buf.readLine())!=null)
           {


              count++;
           }

           buf.close();
           fr.close();
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }

        totalr=count;
        inpmatrix = new double[count][10];
        outmatrix = new double[count];

        try
        {
           FileReader fr = new FileReader("training.txt");

           BufferedReader buf=new BufferedReader(fr);

           String s;

           int c=0;
           while ((s=buf.readLine())!=null)
           {
                String [] parts = s.split(",");

                if(parts[0].equalsIgnoreCase("tcp"))
                {
                   inpmatrix[c][0] = 0;
                }
                else if(parts[0].equalsIgnoreCase("udp"))
                {
                   inpmatrix[c][1] = 1;
                }
                else
                {
                   inpmatrix[c][2] = 2;
                }

                for (int i=1;i<10;i++)
                {
                    inpmatrix[c][i] = Double.parseDouble(parts[i]);


                }

                outmatrix[c]=getATStatusForString(parts[10]);



           }

           buf.close();
           fr.close();
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }



        OurSystemModel om = new OurSystemModel();
        om.buildHmm();
        guiinst.writetolog("HMM training completed");







    }


    public STATUS classifyConnection(ConnectionAttributes ca)
    {



             /*
            res = res + ca.protocoltype * lr.beta(0) + ca.service * lr.beta(1) +
                  ca.src_bytes * lr.beta(2) +  ca.dest_bytes * lr.beta(3) +
                  ca.count * lr.beta(4) + ca.dst_host_same_src_port_rate* lr.beta(5) +
                  ca.dst_host_srv_diff_host_rate * lr.beta(6) + ca.dst_host_serror_rate * lr.beta(7) +
                  ca.dst_host_srv_serror_rate * lr.beta(8) + ca.dst_host_rerror_rate * lr.beta(9);
              *
              *
              */

             double maxp = 0;
             int whom=-1;
            for (int i=0;i<totalr;i++)
            {

                double p= Math.pow((ca.protocoltype - inpmatrix[i][0]),2) +
                Math.pow((ca.service - inpmatrix[i][1]),2) +
                 Math.pow((ca.src_bytes - inpmatrix[i][2]),2) +
                  Math.pow((ca.dest_bytes - inpmatrix[i][3]),2) +
                   Math.pow((ca.dst_host_same_src_port_rate - inpmatrix[i][4]),2) +
                    Math.pow((ca.dst_host_srv_diff_host_rate - inpmatrix[i][5]),2) +
                     Math.pow((ca.dst_host_serror_rate - inpmatrix[i][6]),2) +
                     Math.pow((ca.dst_host_rerror_rate - inpmatrix[i][7]),2);

                 p = Math.sqrt(p);

                 if (p>maxp)
                 {
                     maxp=p;
                     whom=i;
                 }




            }

             int r = (int)outmatrix[whom];

             switch(r)
            {
                case 0:
                {
                    return STATUS.NORMAL;

                }
                case 1:
                {
                    return STATUS.BACK;

                }
                case 2:
                {
                    return STATUS.IPSWEEP;

                }
                case 3:
                {
                    return STATUS.GUESSPASSWD;

                }
                case 4:
                {
                    return STATUS.PORTSWEEP;

                }
                case 5:
                {
                    return STATUS.TEARDROP;

                }
                case 6:
                {
                    return STATUS.NMAP;

                }
                case 7:
                {
                    return STATUS.SMURF;

                }
                case 8:
                {
                    return STATUS.POD;

                }
                case 9:
                {
                    return STATUS.NEPTUNE;


                }
                default:
                {
                   return STATUS.NORMAL;

                }
            }


    }

    int  getATStatusForString(String str)
    {
        int res = 0;

        if (str.equals("back"))
        {
             res = 1;
        }
        else if (str.equals("ipsweep"))
        {
            res = 2;

        }
        else if (str.equals("guesspasswd"))
        {
           res = 3;
        }
        else if (str.equals("portsweep"))
        {
          res = 4;
        }
        else if (str.equals("teardrop"))
        {
          res = 5;
        }
        else if (str.equals("nmap"))
        {
          res = 6;
        }
        else if (str.equals("smurf"))
        {
           res = 7;
        }
        else if (str.equals("pod"))
        {
           res = 8;
        }
        else if (str.equals("neptune"))
        {
           res = 9;
        }
        else {

            res = 0;

        }

        return res;


    }

}
