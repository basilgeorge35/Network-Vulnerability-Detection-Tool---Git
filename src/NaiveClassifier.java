import java.awt.BorderLayout;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.core.Instances;
import weka.core.OptionHandler;
import weka.core.Utils;
import weka.filters.Filter;
import weka.core.Attribute;

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Random;
import java.util.Vector;
import jpcap.packet.IPPacket;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.ThresholdCurve;
import weka.core.FastVector;
import weka.core.Instance;
import weka.gui.visualize.PlotData2D;
import weka.gui.visualize.ThresholdVisualizePanel;


/**
 *
 * @author basilGeorge
 */
public class NaiveClassifier {

    GUI guiinst;

    

    Classifier cModel;
    Attribute protocoltype = new Attribute("protocoltype");
    Attribute service = new Attribute("service");
    Attribute src_bytes = new Attribute("src_bytes");
    Attribute dest_bytes = new Attribute("dest_bytes");
    Attribute count = new Attribute("count");
    Attribute dst_host_same_src_port_rate = new Attribute("dst_host_same_src_port_rate");
    Attribute dst_host_srv_diff_host_rate = new Attribute("dst_host_srv_diff_host_rate");
    Attribute dst_host_serror_rate = new Attribute("dst_host_serror_rate");
    Attribute dst_host_srv_serror_rate = new Attribute("dst_host_srv_serror_rate");
    Attribute dst_host_rerror_rate = new Attribute("dst_host_rerror_rate");
    FastVector fvClassVal = new FastVector(10);
    Attribute ClassAttribute;
    FastVector fvWekaAttributes = new FastVector(11);
    Instances isTrainingSet;
    

    Vector<ConnectionAttributes> trainconnAttrib = new Vector<ConnectionAttributes>();


    void init(GUI inst)
    {
         guiinst = inst;

         
         
         fvClassVal.addElement("normal");
         fvClassVal.addElement("back");
         fvClassVal.addElement("ipsweep");
         fvClassVal.addElement("guesspasswd");
         fvClassVal.addElement("portsweep");
         fvClassVal.addElement("teardrop");
         fvClassVal.addElement("nmap");
         fvClassVal.addElement("smurf");
         fvClassVal.addElement("pod");
         fvClassVal.addElement("neptune");
         ClassAttribute = new Attribute("theClass", fvClassVal);

         fvWekaAttributes.addElement(protocoltype);
         fvWekaAttributes.addElement(service);
         fvWekaAttributes.addElement(src_bytes);
         fvWekaAttributes.addElement(dest_bytes);
         fvWekaAttributes.addElement(count);
         fvWekaAttributes.addElement(dst_host_same_src_port_rate);
         fvWekaAttributes.addElement(dst_host_srv_diff_host_rate);
         fvWekaAttributes.addElement(dst_host_serror_rate);
         fvWekaAttributes.addElement(dst_host_srv_serror_rate);
         fvWekaAttributes.addElement(dst_host_rerror_rate);
         fvWekaAttributes.addElement(ClassAttribute);


    }

    STATUS  getATStatusForString(String str)
    {
        STATUS res = STATUS.NORMAL;
        
        if (str.equals("back"))
        {
             res = STATUS.BACK;
        }
        else if (str.equals("ipsweep"))
        {
            res = STATUS.IPSWEEP;

        }
        else if (str.equals("guesspasswd"))
        {
           res = STATUS.GUESSPASSWD;
        }
        else if (str.equals("portsweep"))
        {
          res = STATUS.PORTSWEEP;
        }
        else if (str.equals("teardrop"))
        {
          res = STATUS.TEARDROP;
        }
        else if (str.equals("nmap"))
        {
          res = STATUS.NMAP;
        }
        else if (str.equals("smurf"))
        {
           res = STATUS.SMURF;
        }
        else if (str.equals("pod"))
        {
           res = STATUS.POD;
        }
        else if (str.equals("neptune"))
        {
           res = STATUS.NEPTUNE;
        }
        else {

            res = STATUS.NORMAL;

        }

        return res;


    }

    public void trainClassifier()
    {


        int count = 0;
        try
        {
           FileReader fr = new FileReader("training.txt");

           BufferedReader buf=new BufferedReader(fr);

           String s;

           while ((s=buf.readLine())!=null)
           {

              //System.out.println("Loading the data ***");
              //System.out.println(s);
              count++;

              String [] temp = s.split(",");

              ConnectionAttributes ca = new ConnectionAttributes();

              if (temp[0].equals("tcp"))
              {
                 ca.protocoltype = IPPacket.IPPROTO_TCP;
              }
              else if(temp[0].equals("udp"))
              {
                 ca.protocoltype = IPPacket.IPPROTO_UDP;
              }
              else
              {
                 ca.protocoltype = IPPacket.IPPROTO_ICMP;
              }

              ca.service = Integer.parseInt(temp[1]);

              ca.src_bytes = Integer.parseInt(temp[2]);
              
              ca.dest_bytes = Integer.parseInt(temp[3]);

              ca.count = Integer.parseInt(temp[4]);

              ca.dst_host_same_src_port_rate = Float.parseFloat(temp[5]);

              ca.dst_host_srv_diff_host_rate = Float.parseFloat(temp[6]);

              ca.dst_host_serror_rate = Float.parseFloat(temp[7]);

              ca.dst_host_srv_serror_rate = Float.parseFloat(temp[8]);

              ca.dst_host_rerror_rate = Float.parseFloat(temp[9]);



              //ca.res = getATStatusForString(temp[10]);
              ca.res = temp[10];

              trainconnAttrib.add(ca);


           }
         }
         catch(Exception e)
         {
            e.printStackTrace();
         }



         // Create an empty training set
         isTrainingSet = new Instances("Rel", fvWekaAttributes, count);
         // Set class index
         isTrainingSet.setClassIndex(10);


         // Load the training pattern

         for (int i = 0; i < trainconnAttrib.size(); i++)
         {
             ConnectionAttributes ca = trainconnAttrib.get(i);
             Instance iExample = new Instance(11);

             iExample.setValue((Attribute)fvWekaAttributes.elementAt(0),ca.protocoltype);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(1),ca.service);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(2),ca.src_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(3),ca.dest_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(4),ca.count);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(5),ca.dst_host_same_src_port_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(6),ca.dst_host_srv_diff_host_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(7),ca.dst_host_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(8),ca.dst_host_srv_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(9),ca.dst_host_rerror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(10),ca.res);
             isTrainingSet.add(iExample);
             

         }
         
         try
         {
             cModel = (Classifier)new NaiveBayes();
             cModel.buildClassifier(isTrainingSet);

             guiinst.writetolog(" Trained the model");

             
             Evaluation eTest = new Evaluation(isTrainingSet);
             Instances isTestingSet = new Instances("Test", fvWekaAttributes, 1);
             ConnectionAttributes ca = trainconnAttrib.get(0);
             Instance iExample = new Instance(11);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(0),ca.protocoltype);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(1),ca.service);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(2),ca.src_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(3),ca.dest_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(4),ca.count);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(5),ca.dst_host_same_src_port_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(6),ca.dst_host_srv_diff_host_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(7),ca.dst_host_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(8),ca.dst_host_srv_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(9),ca.dst_host_rerror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(10),ca.res);
             isTestingSet.add(iExample);
             isTestingSet.setClassIndex(10);
             eTest.evaluateModel(cModel, isTestingSet);
             String strSummary = eTest.toSummaryString();
             //System.out.println(strSummary);
             guiinst.writetolog("Training Completed for naive baiyes");
             //guiinst.writetolog(strSummary);

             eTest.crossValidateModel(cModel,isTrainingSet,4,new Random(1));

             ThresholdCurve tc = new ThresholdCurve();
             int classIndex = 0;
             Instances resultx = tc.getCurve(eTest.predictions(), classIndex);
             // plot curve
             ThresholdVisualizePanel vmc = new ThresholdVisualizePanel();
             vmc.setROCString("(Area under ROC = " +
                Utils.doubleToString(tc.getROCArea(resultx), 4) + ")");
             vmc.setName(resultx.relationName());
             PlotData2D tempd = new PlotData2D(resultx);
             tempd.setPlotName(resultx.relationName());
             tempd.addInstanceNumberAttribute();

             // specify which points are connected
             boolean[] cp = new boolean[resultx.numInstances()];
             for (int n = 1; n < cp.length; n++)
               cp[n] = true;
             tempd.setConnectPoints(cp);
             // add plot
             vmc.addPlot(tempd);

            // display curve
            String plotName = vmc.getName();
            final javax.swing.JFrame jf =
              new javax.swing.JFrame("Weka Classifier Visualize: "+plotName);
            jf.setSize(500,400);

            jf.getContentPane().setLayout(new BorderLayout());
            jf.getContentPane().add(vmc, BorderLayout.CENTER);

            jf.addWindowListener(new java.awt.event.WindowAdapter() {
              public void windowClosing(java.awt.event.WindowEvent e) {
              jf.dispose();
              }
            });
            jf.setVisible(true);


              
              

             //System.out.println(classifyConnection(ca));

             


         }
         catch(Exception e)
         {
              e.printStackTrace();

         }

         
         
         //Evaluation eTest = new Evaluation(isTrainingSet);
          //eTest.evaluateModel(cModel, isTestingSet);

          //String strSummary = eTest.toSummaryString();
          //System.out.println(strSummary);







    }

    public STATUS classifyConnection(ConnectionAttributes ca)
    {
            ca.res = "normal";
            STATUS result = STATUS.NORMAL;

            STATUS[] resarray = {STATUS.NORMAL,STATUS.BACK,STATUS.IPSWEEP,STATUS.GUESSPASSWD,
                                 STATUS.PORTSWEEP,STATUS.TEARDROP,STATUS.NMAP,STATUS.SMURF,
                                 STATUS.POD,STATUS.NEPTUNE};


             Instance iExample = new Instance(11);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(0),ca.protocoltype);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(1),ca.service);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(2),ca.src_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(3),ca.dest_bytes);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(4),ca.count);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(5),ca.dst_host_same_src_port_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(6),ca.dst_host_srv_diff_host_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(7),ca.dst_host_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(8),ca.dst_host_srv_serror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(9),ca.dst_host_rerror_rate);
             iExample.setValue((Attribute)fvWekaAttributes.elementAt(10),ca.res);

             iExample.setDataset(isTrainingSet);
             try
             {
                 double[] fDistribution = cModel.distributionForInstance(iExample);
                 double bigval = fDistribution[0];
                 int big = 0;
                 for (int i = 0; i < fDistribution.length;i++)
                 {
                     System.out.println("For " + i + " prob" + fDistribution[i]);

                     if (fDistribution[i] > bigval)
                     {
                         bigval =  fDistribution[i];
                         big = i;
                     }
                 }

                 result = resarray[big];
                 
                 

             }
             catch(Exception e)
             {
                 e.printStackTrace();
             }



             return result;
         

    }

}
