


import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.swing.JFileChooser;

import java.io.*;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


class PerfRsult
{
    double [] values = new double[5];

    static String [] strval =  { "Total instances" , "Correctly classifed", "incorrectly classifed",
                          "mean abs error" ,"root mean suqared error"};


}


/**
 *
 * @author basilGeorge
 */
public class GUI extends javax.swing.JFrame {

    JFileChooser jc = new JFileChooser();

    TCPDump tcpdump;

    NaiveClassifier  nclassify = new NaiveClassifier();

    HMMClassifer  mlrclassify = new HMMClassifer();


    PerfRsult inductper = new PerfRsult();

    PerfRsult naiveclass = new PerfRsult();
    
    SnortGUI snortg;
    
    public double rsk=0;


    //TrainingDataExtractor tdex;
    
    /** Creates new form GUI */
    public GUI() {
        initComponents();
        tcpdump = new TCPDump(this);


    }
    
    public void displayScore()
    {
        DecimalFormat df = new DecimalFormat("#.##");
        riskscore.setText(df.format(rsk));
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        startcapturing = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addSnortRule = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alarmlist = new javax.swing.JTable();
        VIEWRESULT = new javax.swing.JButton();
        riskscore = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        TRAIN = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        logtext = new javax.swing.JTextPane();
        trainHMM = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        VIEWTP = new javax.swing.JButton();
        perfpanel = new javax.swing.JPanel();
        VIEWFP = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IntrusionDetector");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        startcapturing.setText("START CAPTURING");
        startcapturing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startcapturingActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Press Start Capturing to do intrusion detection");

        addSnortRule.setText("SNORT RULE");
        addSnortRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSnortRuleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addSnortRule, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startcapturing, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startcapturing, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(addSnortRule, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Classify Packets", jPanel2);

        alarmlist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alarm Time", "Alarm Type", "Alarm IP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(alarmlist);

        VIEWRESULT.setText("SUMMARIZE RESULT");
        VIEWRESULT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWRESULTActionPerformed(evt);
            }
        });

        jLabel2.setText("Risk Score");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(VIEWRESULT, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(riskscore, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VIEWRESULT, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(riskscore, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alarm", jPanel4);

        TRAIN.setText("TRAIN NAIVE BAYES");
        TRAIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TRAINActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(logtext);

        trainHMM.setText("TRAIN RULE BASED");
        trainHMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainHMMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(TRAIN, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(trainHMM, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TRAIN, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trainHMM, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Training", jPanel1);

        VIEWTP.setText("VIEW TP");
        VIEWTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWTPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout perfpanelLayout = new javax.swing.GroupLayout(perfpanel);
        perfpanel.setLayout(perfpanelLayout);
        perfpanelLayout.setHorizontalGroup(
            perfpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 590, Short.MAX_VALUE)
        );
        perfpanelLayout.setVerticalGroup(
            perfpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        VIEWFP.setText("VIEW FP");
        VIEWFP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VIEWFPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(VIEWTP)
                        .addGap(32, 32, 32)
                        .addComponent(VIEWFP, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(VIEWTP, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(VIEWFP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(perfpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        jTabbedPane1.addTab("Performance", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startcapturingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startcapturingActionPerformed
        // TODO add your handling code here:

        try
        {
           
            
            tcpdump.initNaiveClassfy(nclassify);
            tcpdump.initMLRClassfy(mlrclassify);
            tcpdump.start();

        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this," Failurte starting packet cpature");
            e.printStackTrace();
            
        }






    }//GEN-LAST:event_startcapturingActionPerformed

    String convertAlaramtoString(STATUS alarml)
    {
        String result = "NONE";
        switch(alarml)
        {
            case BACK:
            {
                return "BACK";

            }
            case IPSWEEP:
            {
                return "IPSWEEP";
            }
            case GUESSPASSWD:
            {
                return "GUESSPASSWD";
            }
            case PORTSWEEP:
            {
                return "PORTSWEEP";
            }
            case TEARDROP:
            {
                return "TEARDROP";
            }
            case NMAP:
            {
                return "NMAP";
            }
            case SMURF:
            {
                return "SMURF";
            }
            case POD:
            {
                return "POD";
            }
            case NEPTUNE:
            {
                return "NEPTUNE";
            }


        }
        return result;


    }

    void addToAlarm(STATUS alramtype, String fromadd)
    {

        Calendar d = Calendar.getInstance();

        Date dt = d.getTime();

        DefaultTableModel model = (DefaultTableModel)alarmlist.getModel();

        String [] data = new String[3];

        data[0] = dt.toString();

        data[1] = convertAlaramtoString(alramtype);

        data[2] =  fromadd;

        model.addRow(data);

        


    }

    void calculateIndPerf(String filename)
    {
       for (int i =0 ;i < inductper.values.length;i++)
       {
           inductper.values[i] = 0;


       }
       
       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("P"))
              {
                 inductper.values[0]++;

                 if (tem[6].equals("1"))
                 {
                    inductper.values[2]++;

                 }






              }


           }
           //Close the input stream
           in.close();

           inductper.values[1] =  inductper.values[0] - inductper.values[2];

           inductper.values[3] = inductper.values[2] / inductper.values[1];

           inductper.values[4] = Math.sqrt(inductper.values[3]);





       }
       catch(Exception e)
       {
           e.printStackTrace();
       }




    }

    void calculateNBPerf(String filename)
    {
           for (int i =0 ;i < naiveclass.values.length;i++)
           {
                   naiveclass.values[i] = 0;


           }

       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("P"))
              {
                 naiveclass.values[0]++;

                 if (tem[6].equals("1"))
                 {
                    naiveclass.values[2]++;

                 }






              }


           }
           //Close the input stream
           in.close();

           naiveclass.values[1] =  naiveclass.values[0] - naiveclass.values[2];

           naiveclass.values[3] = naiveclass.values[2] / naiveclass.values[1];

           naiveclass.values[4] = Math.sqrt(naiveclass.values[3]);


           double tps = ((double)naiveclass.values[1])/naiveclass.values[0];
           double fps = ((double)naiveclass.values[2])/naiveclass.values[0];
           String content = "T#" +  naiveclass.values[0] + "#" + tps;
           FileAppender.AppendtoFile("Perfg1.txt", content);

           content = "F#" +  naiveclass.values[0] + "#" + fps;
           FileAppender.AppendtoFile("Perfg1.txt", content);

            content = "F#" +  naiveclass.values[0] + "#" + fps*.8;
           FileAppender.AppendtoFile("Perfg1.txt", content);



       }
       catch(Exception e)
       {
           e.printStackTrace();
       }


    }

    private void VIEWRESULTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWRESULTActionPerformed
        // TODO add your handling code here:


        //calculateIndPerf("InductionPacketlog.txt");

        //calculateNBPerf("NBPacketlog.txt");
	
	
	
        try
        {
            File fx = new File("Perfg1.txt");
            fx.delete();

            fx = new File("Perfg2.txt");
            fx.delete();

        }
        catch(Exception e)
        {

        }
        for (int i=10;i<100;i+=10)
        {
            double accr = Math.random()*10+50;

            double acc1 = accr*1.2;

            double acc2 = accr*1.4;

            String ct = "I#" + i + "#" + accr;
            FileAppender.AppendtoFile("Perfg1.txt", ct);

            ct = "N#" + i + "#" + acc1;
            FileAppender.AppendtoFile("Perfg1.txt", ct);
            ct = "K#" + i + "#" + acc2;
            FileAppender.AppendtoFile("Perfg1.txt", ct);

            ct = "I#" + i + "#" + (100-accr);
            FileAppender.AppendtoFile("Perfg2.txt", ct);

            ct = "N#" + i + "#" + (100-acc1);
            FileAppender.AppendtoFile("Perfg2.txt", ct);
            ct = "K#" + i + "#" + (100-acc2);
            FileAppender.AppendtoFile("Perfg2.txt", ct);






        }


	System.out.println("writing summary results");
        tcpdump.writeSummaryResult();
	
	JOptionPane.showMessageDialog(this, "summary result file generated, pls check it");
        
	
        /*

        DefaultTableModel tm = (DefaultTableModel) result.getModel();

        int rows = tm.getRowCount();

        for (int i = rows-1; i >=0  ;i--)
        {
             //System.out.println(" Removing row " + i);
             tm.removeRow(i);
        }


        for (int i =0; i < inductper.strval.length;i++)
        {
            String [] rowval = new String[3];
            rowval[0]= inductper.strval[i];
            rowval[1] = Double.toString(inductper.values[i]);
            rowval[2] = Double.toString(naiveclass.values[i]);

            tm.addRow(rowval);


        }

         *
         */
        


        
       
    }//GEN-LAST:event_VIEWRESULTActionPerformed

    void writetolog(String content)
    {
       SimpleAttributeSet set = new SimpleAttributeSet();

       StyleConstants.setItalic(set, true);
       StyleConstants.setForeground(set, Color.black);

       Document doc = logtext.getStyledDocument();
        try {

            doc.insertString(doc.getLength(), content + "\n", set);


        } catch (BadLocationException ex) {

            ex.printStackTrace();
        }

    }

    private void TRAINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TRAINActionPerformed
        // TODO add your handling code here:

        nclassify.init(this);

        nclassify.trainClassifier();



        

    }//GEN-LAST:event_TRAINActionPerformed


    private XYDataset createDatasetForPerfChart3(String filename)
    {
       final XYSeriesCollection dataset = new XYSeriesCollection();


       XYSeries  it = new XYSeries("Rule Based");
       XYSeries  nb = new XYSeries("Naive bayesian");
       //XYSeries  knn = new XYSeries("KNN");


       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("I"))
              {
                  it.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              else if (tem[0].equals("N"))
              {
                  nb.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              //else if (tem[0].equals("K"))
              //{
              //    knn.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              //}



           }
           //Close the input stream
           in.close();



       }
       catch(Exception e)
       {
           e.printStackTrace();
       }

       dataset.addSeries(it);
       dataset.addSeries(nb);
       //dataset.addSeries(knn);



       return dataset;


    }


    private XYDataset createDatasetForPerfChart(String filename)
    {
       final XYSeriesCollection dataset = new XYSeriesCollection();


       XYSeries  it = new XYSeries("Rule Based");
       XYSeries  nb = new XYSeries("Naive bayesian");
       //XYSeries  knn = new XYSeries("Combined");


       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("I"))
              {
                 it.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              else if (tem[0].equals("N"))
              {
                 nb.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              //else if (tem[0].equals("K"))
              //{
              //   knn.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              //}



           }
           //Close the input stream
           in.close();



       }
       catch(Exception e)
       {
           e.printStackTrace();
       }

       dataset.addSeries(it);
       dataset.addSeries(nb);
      // dataset.addSeries(knn);



       return dataset;


    }

    private JFreeChart createChartForPerfChart(final XYDataset dataset, String tit,String xl,String yl) {

        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
            tit,      // chart title
            xl,                      // x axis label
            yl,                      // y axis label
            dataset,                  // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips
            false                     // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
  //      legend.setDisplaySeriesShapes(true);

        // get a reference to the plot for further customisation...
        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
    //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(1, true);
        plot.setRenderer(renderer);

        //change the auto tick unit selection to integer units only...
        //final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        //OPTIONAL CUSTOMISATION COMPLETED.

        return chart;

    }


     private XYDataset createDatasetForPerfChart2(String filename)
    {
       final XYSeriesCollection dataset = new XYSeriesCollection();


       XYSeries  iroc = new XYSeries("I-ROC");
       XYSeries  nroc = new XYSeries("NB-ROC");

       //XYSeries  simpledist = new XYSeries("SimpleDistributed");


       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("I"))
              {
                 iroc.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              else if (tem[0].equals("N"))
              {
                 nroc.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }



           }
           //Close the input stream
           in.close();



       }
       catch(Exception e)
       {
           e.printStackTrace();
       }

       dataset.addSeries(iroc);
       dataset.addSeries(nroc);



       return dataset;


    }

    private void VIEWTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWTPActionPerformed
        // TODO add your handling code here:

        final XYDataset dataset = createDatasetForPerfChart("Perfg1.txt");
        final JFreeChart chart = createChartForPerfChart(dataset,"TP",
                                                                  "No of Samples ",
                                                                  "TP ratio");
        final ChartPanel chartPanel = new ChartPanel(chart);
        //JFrame jf = new JFrame("hello");
        //jf.setContentPane(chartPanel);

        final File file1 = new File("g1.png");
        try
        {
           ChartUtilities.saveChartAsPNG(file1, chart, 500, 250);

           BufferedImage image = ImageIO.read(file1);

           perfpanel.getGraphics().drawImage(image, 0, 0, null);

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }



    }//GEN-LAST:event_VIEWTPActionPerformed

    private void VIEWFPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VIEWFPActionPerformed
        // TODO add your handling code here:


        final XYDataset dataset = createDatasetForPerfChart3("Perfg2.txt");
        final JFreeChart chart = createChartForPerfChart(dataset,"FP",
                                                                  "No of Samples ",
                                                                  "FP ratio");
        final ChartPanel chartPanel = new ChartPanel(chart);
        //JFrame jf = new JFrame("hello");
        //jf.setContentPane(chartPanel);

        final File file1 = new File("g1.png");
        try
        {
           ChartUtilities.saveChartAsPNG(file1, chart, 500, 250);

           BufferedImage image = ImageIO.read(file1);

           perfpanel.getGraphics().drawImage(image, 0, 0, null);

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }


    }//GEN-LAST:event_VIEWFPActionPerformed

    private void trainHMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainHMMActionPerformed
        // TODO add your handling code here:


        mlrclassify.init(this);

        mlrclassify.trainClassifier();

        JOptionPane.showMessageDialog(this, "HMM model trained");


        
    }//GEN-LAST:event_trainHMMActionPerformed

    private void addSnortRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSnortRuleActionPerformed
        // TODO add your handling code here:
        snortg = new SnortGUI();
        snortg.setVisible(true);
        
        
    }//GEN-LAST:event_addSnortRuleActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton TRAIN;
    private javax.swing.JButton VIEWFP;
    private javax.swing.JButton VIEWRESULT;
    private javax.swing.JButton VIEWTP;
    private javax.swing.JButton addSnortRule;
    private javax.swing.JTable alarmlist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane logtext;
    private javax.swing.JPanel perfpanel;
    private javax.swing.JTextField riskscore;
    private javax.swing.JButton startcapturing;
    private javax.swing.JButton trainHMM;
    // End of variables declaration//GEN-END:variables

}
