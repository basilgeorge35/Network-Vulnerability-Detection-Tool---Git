import be.ac.ulg.montefiore.run.jahmm.*;
import be.ac.ulg.montefiore.run.jahmm.draw.GenericHmmDrawerDot;
import be.ac.ulg.montefiore.run.jahmm.learn.BaumWelchLearner;
import be.ac.ulg.montefiore.run.jahmm.toolbox.KullbackLeiblerDistanceCalculator;
import be.ac.ulg.montefiore.run.jahmm.toolbox.MarkovGenerator;
import java.util.*;

/**
 *
 * @author basilGeorge
 */
public class OurSystemModel {

    /* Possible packet reception status */

	public enum Packet {
		Normal, Abnormal;

		public ObservationDiscrete<Packet> observation() {
			return new ObservationDiscrete<Packet>(this);
		}
	};


	static public void main(String[] argv)
	throws java.io.IOException
	{
		/* Build a HMM and generate observation sequences using this HMM */

		Hmm<ObservationDiscrete<Packet>> hmm = buildHmm();

		List<List<ObservationDiscrete<Packet>>> sequences;
		sequences = generateSequences(hmm);

		/* Baum-Welch learning */

		BaumWelchLearner bwl = new BaumWelchLearner();

		Hmm<ObservationDiscrete<Packet>> learntHmm = buildInitHmm();

		// This object measures the distance between two HMMs
		KullbackLeiblerDistanceCalculator klc =
			new KullbackLeiblerDistanceCalculator();

		// Incrementally improve the solution
		for (int i = 0; i < 10; i++) {
		//	System.out.println("Distance at iteration " + i + ": " +
		//			klc.distance(learntHmm, hmm));
			learntHmm = bwl.iterate(learntHmm, sequences);
		}

		System.out.println("Resulting HMM:\n" + learntHmm);

		/* Computing the probability of a sequence */

		ObservationDiscrete<Packet> packetOk = Packet.Normal.observation();
		ObservationDiscrete<Packet> packetLoss = Packet.Abnormal.observation();

		List<ObservationDiscrete<Packet>> testSequence =
			new ArrayList<ObservationDiscrete<Packet>>();
		testSequence.add(packetOk);
                System.out.println("Sequence probability: " +
				learntHmm.probability(testSequence));
		testSequence.add(packetOk);
                System.out.println("Sequence probability: " +
				learntHmm.probability(testSequence));
		testSequence.add(packetLoss);
                System.out.println("Sequence probability: " +
				learntHmm.probability(testSequence));
                testSequence.add(packetOk);
		testSequence.add(packetOk);
                System.out.println("Sequence probability: " +
				learntHmm.probability(testSequence));

		System.out.println("Sequence probability: " +
				learntHmm.probability(testSequence));

		/* Write the final result to a 'dot' (graphviz) file. */

		//(new GenericHmmDrawerDot()).write(learntHmm, "learntHmm.dot");
	}


	/* The HMM this example is based on */

	static Hmm<ObservationDiscrete<Packet>> buildHmm()
	{
		Hmm<ObservationDiscrete<Packet>> hmm =
			new Hmm<ObservationDiscrete<Packet>>(5,
					new OpdfDiscreteFactory<Packet>(Packet.class));

		hmm.setPi(0, 0.1);
		hmm.setPi(1, 0.2);
                hmm.setPi(2, 0.4);
                hmm.setPi(3, 0.2);
                hmm.setPi(2, 0.1);



		hmm.setOpdf(0, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.95, 0.05 }));
		hmm.setOpdf(1, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.80, 0.20 }));
                hmm.setOpdf(2, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.70, 0.30 }));
                hmm.setOpdf(3, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.60, 0.40 }));
                hmm.setOpdf(4, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.30, 0.70 }));

		/*hmm.setAij(0, 1, 0.05);
		hmm.setAij(0, 0, 0.95);
		hmm.setAij(1, 0, 0.10);
		hmm.setAij(1, 1, 0.90);*/

                hmm.setAij(0, 0, 0.45);
                hmm.setAij(0, 1, 0.35);
                hmm.setAij(0, 2, 0.20);
                hmm.setAij(0, 3, 0.0);
                hmm.setAij(0, 4, 0.0);


                hmm.setAij(1, 0, 0.25);
                hmm.setAij(1, 1, 0.35);
                hmm.setAij(1, 2, 0.30);
                hmm.setAij(1, 3, 0.10);
                hmm.setAij(1, 4, 0.0);

                hmm.setAij(2, 0, 0);
                hmm.setAij(2, 1, 0.35);
                hmm.setAij(2, 2, 0.20);
                hmm.setAij(2, 3, 0.35);
                hmm.setAij(2, 4, 0.10);


                hmm.setAij(3, 0, 0);
                hmm.setAij(3, 1, 0.10);
                hmm.setAij(3, 2, 0.25);
                hmm.setAij(3, 3, 0.40);
                hmm.setAij(3, 4, 0.25);


                hmm.setAij(4, 0, 0);
                hmm.setAij(4, 1, 0.10);
                hmm.setAij(4, 2, 0.15);
                hmm.setAij(4, 3, 0.25);
                hmm.setAij(4, 4, 0.50);




		return hmm;
	}


	/* Initial guess for the Baum-Welch algorithm */

	static Hmm<ObservationDiscrete<Packet>> buildInitHmm()
	{
		Hmm<ObservationDiscrete<Packet>> hmm =
			new Hmm<ObservationDiscrete<Packet>>(5,
					new OpdfDiscreteFactory<Packet>(Packet.class));

		hmm.setPi(0, 0.1);
		hmm.setPi(1, 0.2);
                hmm.setPi(2, 0.4);
                hmm.setPi(3, 0.2);
                hmm.setPi(2, 0.1);



		hmm.setOpdf(0, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.95, 0.05 }));
		hmm.setOpdf(1, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.80, 0.20 }));
                hmm.setOpdf(2, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.70, 0.30 }));
                hmm.setOpdf(3, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.60, 0.40 }));
                hmm.setOpdf(4, new OpdfDiscrete<Packet>(Packet.class,
				new double[] { 0.30, 0.70 }));

		/*hmm.setAij(0, 1, 0.05);
		hmm.setAij(0, 0, 0.95);
		hmm.setAij(1, 0, 0.10);
		hmm.setAij(1, 1, 0.90);*/

                hmm.setAij(0, 0, 0.45);
                hmm.setAij(0, 1, 0.35);
                hmm.setAij(0, 2, 0.20);
                hmm.setAij(0, 3, 0.0);
                hmm.setAij(0, 4, 0.0);


                hmm.setAij(1, 0, 0.25);
                hmm.setAij(1, 1, 0.35);
                hmm.setAij(1, 2, 0.30);
                hmm.setAij(1, 3, 0.10);
                hmm.setAij(1, 4, 0.0);

                hmm.setAij(2, 0, 0);
                hmm.setAij(2, 1, 0.35);
                hmm.setAij(2, 2, 0.20);
                hmm.setAij(2, 3, 0.35);
                hmm.setAij(2, 4, 0.10);


                hmm.setAij(3, 0, 0);
                hmm.setAij(3, 1, 0.10);
                hmm.setAij(3, 2, 0.25);
                hmm.setAij(3, 3, 0.40);
                hmm.setAij(3, 4, 0.25);


                hmm.setAij(4, 0, 0);
                hmm.setAij(4, 1, 0.10);
                hmm.setAij(4, 2, 0.15);
                hmm.setAij(4, 3, 0.25);
                hmm.setAij(4, 4, 0.50);


		return hmm;
	}


	/* Generate several observation sequences using a HMM */

	static <O extends Observation> List<List<O>>
	generateSequences(Hmm<O> hmm)
	{
		MarkovGenerator<O> mg = new MarkovGenerator<O>(hmm);

		List<List<O>> sequences = new ArrayList<List<O>>();
		for (int i = 0; i < 200; i++)
			sequences.add(mg.observationSequence(100));

		return sequences;
	}




}
